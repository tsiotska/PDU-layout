@import '../../globalStyles/variables/variables';
@import '../../globalStyles/mixins/mixins';

.OverviewWrapper {
  #flex-center;
  flex-direction: column;
  width: 100%;
  padding: 20px;

  .table {
	#flex-center;
	width: 100%;

	> .column {
	  width: 240px;
	  // margin-left: 50px;

	  //hardcoded with px
	  &:first-child { //add 80 to column with label and give 80 for label size or margin
		width: 320px;

		.row:nth-child(3) .column:first-child {
		  width: 160px;

		  .field {
			width: 80px;
		  }
		}
	  }

	  > .row {
		width: 100%;
		margin: 10px 25px;

		&:nth-child(1) {
		  .row {
			align-items: flex-end;
			justify-content: space-between;
			align-self: flex-start;
			width: 220px;
			margin-right: 20px;
			padding-right: 50px;
			border-bottom: 3px solid #E3BE3F;

			.Box {
			  #flex-center;
			  width: 27px;
			  height: 37px;
			  background-color: #E3BE3F;
			}

			.label {
			  #fontStack1;
			}
		  }
		}

		&:nth-child(2) {
		  .row {
			align-items: flex-end;
			justify-content: space-around;
			width: 240px;
		  }
		}

		&:nth-child(3) {
		  height: 150px;

		  .column {
			justify-content: space-around;
			width: 100%; //80px;

			.label {
			  display: flex;
			  height: 100%;
			  width: 100%;

			  &:nth-child(2n) {
				background-color: #ebf1f4;
			  }

			  .field {
				#flex-center;
				justify-content: flex-start;
				height: 100%;
				width: 100%;
			  }
			}
		  }
		}
	  }
	}
  }
}

//How to simplify? I want to put list loop in one cycle

@labels: 'Phases' 'Outputs' 'State' 'Voltage' 'Current' 'Active Power';
.table .column:first-child > .row {
  .label-loop(2);
  .label-loop (@i) when (@i > 0) {
	&:nth-child(@{i}):before {
	  @label: extract(@labels, @i);
	  content: @label;
	  #flex-center;
	  justify-content: flex-start;
	  color: @text-muted;
	  width: 80px;
	}
	.label-loop(@i - 1);
  }

  .label2-loop(4);
  .label2-loop (@i) when (@i > 0) {
	.column:first-child .label:nth-child(@{i}):before {
	  @label: extract(@labels, @i + 2);
	  content: @label;
	  color: @text-muted;
	  #flex-center;
	  justify-content: flex-start;
	  width: 80px;

	}
	.label2-loop(@i - 1);
  }
}

@media screen and (min-width: 768px) and (max-width: 1199px) {
  .OverviewWrapper {
	.table {
	  // flex-wrap: wrap;
	}
  }
}

@media screen and (max-width: 767px) {
  .OverviewWrapper {
	.table {
	  flex-direction: column;

	  >.column {
		width: 320px;

		> .row:nth-child(3) .column:first-child {
		  width: 160px;

		  .field {
			width: 80px;
		  }
		}

		> .row {
		  .label-loop(2);
		  .label-loop (@i) when (@i > 0) {
			&:nth-child(@{i}):before {
			  @label: extract(@labels, @i);
			  content: @label;
			  #flex-center;
			  justify-content: flex-start;
			  color: @text-muted;
			  width: 80px;
			}
			.label-loop(@i - 1);
		  }

		  .label2-loop(4);
		  .label2-loop (@i) when (@i > 0) {
			.column:first-child .label:nth-child(@{i}):before {
			  @label: extract(@labels, @i + 2);
			  content: @label;
			  color: @text-muted;
			  #flex-center;
			  justify-content: flex-start;
			  width: 80px;
			}
			.label2-loop(@i - 1);
		  }
	  }
	  }
	}
  }
}

